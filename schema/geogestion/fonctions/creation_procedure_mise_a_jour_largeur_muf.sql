------------------------------------------------
-- CREATION_PROCEDURE_MISE_A_JOUR_LARGEUR_MUF --
------------------------------------------------

CREATE OR REPLACE PROCEDURE MISE_A_JOUR_LARGEUR_MUF(IDENTIFIANT_DOSSIER NUMBER)
IS
BEGIN


-- 1. Insertion des données dans la table TA_RTGE_MUF_END_POINT

MERGE INTO G_GESTIONGEO.TA_RTGE_MUF_END_POINT a
USING
	(
	SELECT
		a.OBJECTID AS OBJECTID,
		a.FID_NUMERO_DOSSIER AS FID_NUMERO_DOSSIER,
		SDO_LRS.GEOM_SEGMENT_END_PT(SDO_CS.MAKE_2D(SDO_LRS.CONVERT_TO_LRS_GEOM(a.geom))) as geom
	FROM
	    TA_RTGE_LINEAIRE_INTEGRATION a
	WHERE
	    a.FID_IDENTIFIANT_TYPE = 703
	AND 
		a.FID_NUMERO_DOSSIER = IDENTIFIANT_DOSSIER
	) b
ON(a.OBJECTID = b.OBJECTID
AND a.FID_NUMERO_DOSSIER = b.FID_NUMERO_DOSSIER)
WHEN NOT MATCHED THEN 
INSERT (a.OBJECTID, a.FID_NUMERO_DOSSIER, a.GEOM)
VALUES (b.OBJECTID, b.FID_NUMERO_DOSSIER, b.GEOM)
;


-- 2. Insertion des données dans la table TA_RTGE_MUF_START_POINT

MERGE INTO G_GESTIONGEO.TA_RTGE_MUF_START_POINT a
USING
	(
	SELECT
		a.OBJECTID AS OBJECTID,
		a.FID_NUMERO_DOSSIER AS FID_NUMERO_DOSSIER,
		SDO_LRS.GEOM_SEGMENT_START_PT(SDO_CS.MAKE_2D(SDO_LRS.CONVERT_TO_LRS_GEOM(a.geom))) as geom
	FROM
	    TA_RTGE_LINEAIRE_INTEGRATION a
	WHERE
	    a.FID_IDENTIFIANT_TYPE = 703
	AND 
		a.FID_NUMERO_DOSSIER = IDENTIFIANT_DOSSIER
	) b
ON(a.OBJECTID = b.OBJECTID
AND a.FID_NUMERO_DOSSIER = b.FID_NUMERO_DOSSIER)
WHEN NOT MATCHED THEN 
INSERT (a.OBJECTID, a.FID_NUMERO_DOSSIER, a.GEOM)
VALUES (b.OBJECTID, b.FID_NUMERO_DOSSIER, b.GEOM)
;


-- 3. Initialisation de la table TA_RTGE_MUF_START_POINT_PTTOPO

MERGE INTO G_GESTIONGEO.TA_RTGE_MUF_START_POINT_PTTOPO a
USING
	(
	SELECT
	    a.OBJECTID AS OBJECTID_OBJET,
	    b.objectid AS OBJECTID_PTTOPO
	FROM
	    G_GESTIONGEO.TA_RTGE_MUF_START_POINT a
	    INNER JOIN G_GESTIONGEO.TA_PTTOPO_INTEGRATION b ON SDO_EQUAL(b.geom, a.geom) = 'TRUE'
	    AND a.FID_NUMERO_DOSSIER = b.FID_NUMERO_DOSSIER
	WHERE
		a.FID_NUMERO_DOSSIER = b.FID_NUMERO_DOSSIER
	)b
ON (a.OBJECTID_OBJET = b.OBJECTID_OBJET
AND a.OBJECTID_PTTOPO = b.OBJECTID_PTTOPO)
WHEN NOT MATCHED THEN
INSERT(a.OBJECTID_OBJET, a.OBJECTID_PTTOPO)
VALUES(b.OBJECTID_OBJET, b.OBJECTID_PTTOPO)
; 


-- 4. Initialisation de la table TA_RTGE_MUF_END_POINT_PTTOPO

MERGE INTO G_GESTIONGEO.TA_RTGE_MUF_END_POINT_PTTOPO a
USING
	(
	SELECT
	    a.OBJECTID AS OBJECTID_OBJET,
	    b.objectid AS OBJECTID_PTTOPO
	FROM
	    G_GESTIONGEO.TA_RTGE_MUF_END_POINT a
	    INNER JOIN G_GESTIONGEO.TA_PTTOPO_INTEGRATION b ON SDO_EQUAL(b.geom, a.geom) = 'TRUE'
	    AND a.FID_NUMERO_DOSSIER = b.FID_NUMERO_DOSSIER
	WHERE
		a.FID_NUMERO_DOSSIER = b.FID_NUMERO_DOSSIER
	)b
ON (a.OBJECTID_OBJET = b.OBJECTID_OBJET
AND a.OBJECTID_PTTOPO = b.OBJECTID_PTTOPO)
WHEN NOT MATCHED THEN
INSERT(a.OBJECTID_OBJET, a.OBJECTID_PTTOPO)
VALUES(b.OBJECTID_OBJET, b.OBJECTID_PTTOPO)
; 


-- 5. Initialisation de la table G_GESTIONGEO.TA_RTGE_MUF_STATUT

MERGE INTO G_GESTIONGEO.TA_RTGE_MUF_STATUT a
USING
	(
	WITH MUF_RELEVE AS
		(
		    SELECT
		        DISTINCT a.OBJECTID_OBJET AS OBJECTID,
		        2 AS STATUT
		    FROM
		        TA_RTGE_MUF_START_POINT_PTTOPO a INNER JOIN TA_RTGE_MUF_END_POINT_PTTOPO b on a.OBJECTID_OBJET = b.OBJECTID_OBJET
		),
		MUF_PARRALLELE AS
		(
		    SELECT
		        a.OBJECTID_OBJET AS OBJECTID,
		        1 AS STATUT
		    FROM
		        TA_RTGE_MUF_START_POINT_PTTOPO a
		    WHERE
		        a.OBJECTID_OBJET NOT IN (SELECT a.OBJECTID_OBJET FROM TA_RTGE_MUF_END_POINT_PTTOPO a)
		    UNION 
		    SELECT
		        a.OBJECTID_OBJET AS OBJECTID,
		        1 AS STATUT
		    FROM
		        TA_RTGE_MUF_END_POINT_PTTOPO a
		    WHERE
		        a.OBJECTID_OBJET NOT IN (SELECT a.OBJECTID_OBJET FROM TA_RTGE_MUF_START_POINT_PTTOPO a)
		),
		MUF_CONSTRUIT AS
		(
		    SELECT
		    	DISTINCT a.OBJECTID AS OBJECTID,
		    	0 AS STATUT
		    FROM
		        TA_RTGE_MUF_START_POINT a
		    WHERE
		    	OBJECTID NOT IN (SELECT OBJECTID FROM MUF_RELEVE)
		    	AND OBJECTID NOT IN (SELECT OBJECTID FROM MUF_PARRALLELE)
        )
	SELECT
		a.OBJECTID,
		A.STATUT
	FROM
		MUF_RELEVE a
	UNION
	SELECT
		a.OBJECTID,
		A.STATUT
	FROM
		MUF_PARRALLELE a
	UNION
	SELECT
		a.OBJECTID,
		A.STATUT
	FROM
		MUF_CONSTRUIT a
	)b
ON(a.OBJECTID = b.OBJECTID
AND a.STATUT = b.STATUT)
WHEN NOT MATCHED THEN 
INSERT(a.OBJECTID, a.STATUT)
VALUES(b.OBJECTID, b.STATUT)
;


-- 6. Mise à jour de la colonne DECALAGE_DROITE de la table TA_RTGE_LINEAIRE
MERGE INTO TA_RTGE_LINEAIRE_INTEGRATION a
USING
	(
	WITH CTE AS
	    (
		SELECT
		    a.OBJECTID,
		    a.fid_numero_dossier,
		    ROUND(SDO_LRS.GEOM_SEGMENT_LENGTH(SDO_LRS.CONVERT_TO_LRS_GEOM(SDO_CS.MAKE_2D(b.geom))),3) AS mesure
		FROM
		    TA_RTGE_LINEAIRE_INTEGRATION a 
		    INNER JOIN TA_RTGE_MUF_STATUT mb ON a.OBJECTID = mb.OBJECTID
		    INNER JOIN TA_RTGE_LINEAIRE_INTEGRATION b ON SDO_RELATE(b.GEOM, a.GEOM, 'mask = touch') ='TRUE'
		    INNER JOIN TA_RTGE_MUF_STATUT n ON N.OBJECTID = b.OBJECTID
		WHERE
		    mb.statut = 2
		    AND
		    n.statut = 1
	    )
	SELECT
	    cte.OBJECTID,
	    cte.FID_NUMERO_DOSSIER,
	    MIN(MESURE) AS MESURE
	FROM
	    CTE
	GROUP BY cte.OBJECTID, cte.FID_NUMERO_DOSSIER
	)b
ON(a.OBJECTID = b.OBJECTID
AND a.FID_NUMERO_DOSSIER = b.FID_NUMERO_DOSSIER)
WHEN MATCHED THEN UPDATE
SET a.DECALAGE_DROITE = b.MESURE
;



-- 7. Mise à zero des largeurs des petits murs qui croisent deux points topo
MERGE INTO TA_RTGE_LINEAIRE_INTEGRATION a
USING
    (
	WITH CTE AS
	    (
		SELECT
		    a.OBJECTID,
		    a.fid_numero_dossier,
		    ROUND(SDO_LRS.GEOM_SEGMENT_LENGTH(SDO_LRS.CONVERT_TO_LRS_GEOM(SDO_CS.MAKE_2D(b.geom))),3) AS mesure
		FROM
		    TA_RTGE_LINEAIRE_INTEGRATION a 
		    INNER JOIN TA_RTGE_MUF_STATUT mb ON a.OBJECTID = mb.OBJECTID
		    INNER JOIN TA_RTGE_LINEAIRE_INTEGRATION b ON SDO_RELATE(b.GEOM, a.GEOM, 'mask = touch') ='TRUE'
		    INNER JOIN TA_RTGE_MUF_STATUT n ON N.OBJECTID = b.OBJECTID
		WHERE
		    mb.statut = 2
		    AND
		    n.statut = 1
	    )
    SELECT
        a.objectid AS OBJECTID_A,
        a.mesure AS MESURE_A,
        c.objectid AS OBJECTID_CORR,
        null AS MESURE_CORR
    FROM 
        CTE a
        INNER JOIN TA_RTGE_LINEAIRE_INTEGRATION b on a.objectid = b.objectid,
        CTE c
        INNER JOIN TA_RTGE_LINEAIRE_INTEGRATION d on c.objectid = d.objectid
    WHERE
        a.objectid <> c.objectid
        AND
        a.fid_numero_dossier = c.fid_numero_dossier
        AND
        SDO_RELATE(b.geom,d.geom,'mask = touch') = 'TRUE'
        AND 
        SDO_LRS.GEOM_SEGMENT_LENGTH(SDO_LRS.CONVERT_TO_LRS_GEOM(SDO_CS.MAKE_2D(b.geom))) > SDO_LRS.GEOM_SEGMENT_LENGTH(SDO_LRS.CONVERT_TO_LRS_GEOM(SDO_CS.MAKE_2D(d.geom)))
        AND
        SDO_LRS.GEOM_SEGMENT_LENGTH(SDO_LRS.CONVERT_TO_LRS_GEOM(SDO_CS.MAKE_2D(d.geom))) <0.5
    )b
ON(a.OBJECTID = b.OBJECTID_CORR)
WHEN MATCHED THEN UPDATE
SET a.DECALAGE_DROITE = b.MESURE_CORR; 

DELETE FROM TA_RTGE_MUF_END_POINT;
DELETE FROM TA_RTGE_MUF_START_POINT;
DELETE FROM TA_RTGE_MUF_START_POINT_PTTOPO;
DELETE FROM TA_RTGE_MUF_END_POINT_PTTOPO;
DELETE FROM TA_RTGE_MUF_STATUT;

COMMIT;

END MISE_A_JOUR_LARGEUR_MUF;

/
