-- REGROUPEMENT DES FICHIERS SQL SERVANT A INTEGRER LES DONNEES DES SECTIONS CADASTRALES
-- 1. fichier structure_section_cadastrale.sql
-- 2. ficher nomenclature_section_cadastrale.sql
-- 3. fichier normalisation_section_cadastrale.sql

SET SERVEROUTPUT ON
BEGIN
SAVEPOINT POINT_SAUVERGARDE_1;

-- I. FICHIER STRUCTURE_SECTION_CADASTRALE
-- Création des tables TA_SECTION_CADASTRALE_GEOM et TA_SECTION_CADASTRALE sur le schéma G_DGFIP.

-- I.1. Création de la table TA_SECTION_CADASTRALE_GEOM
-- I.1.1. La table TA_SECTION_CADASTRALE_GEOM sert à acceuillir les informations provenant des données tarif de la RVLLP suivant le secteur et le local professionnel
CREATE TABLE G_DGFIP.TA_SECTION_CADASTRALE_GEOM(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
    geom SDO_GEOM
);

-- I.1.2. Création des commentaires
COMMENT ON TABLE G_DGFIP.TA_SECTION_CADASTRALE_GEOM IS 'La table TA_SECTION_CADASTRALE_GEOM regroupe la géométrie des sections cadastrales.';
COMMENT ON COLUMN G_DGFIP.TA_SECTION_CADASTRALE_GEOM.OBJECTID IS 'Clé étrangère vers la table TA_SECTION_CADASTRALE_GEOM.';
COMMENT ON COLUMN G_DGFIP.TA_SECTION_CADASTRALE_GEOM.GEOM IS 'Géométrie des sections cadastrales.';

-- I.1.3. Création de la clé primaire
ALTER TABLE G_DGFIP.TA_SECTION_CADASTRALE_GEOM
ADD CONSTRAINT ta_section_cadastrale_geom_PK 
PRIMARY KEY("OBJECTID")
USING INDEX TABLESPACE "G_ADT_INDX";

-- I.1.4 Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'TA_SECTION_CADASTRALE_GEOM',
    'GEOM',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 594000, 964000, 0.005),SDO_DIM_ELEMENT('Y', 6987000, 7165000, 0.005)), 
    2154
);

-- I.1.5 Création de l'index spatial sur le champ geom
CREATE INDEX TA_SECTION_CADASTRALE_GEOM_SIDX
ON G_DGFIP.TA_SECTION_CADASTRALE_GEOM(GEOM)
INDEXTYPE IS MDSYS.SPATIAL_INDEX

-- I.2. Création de la table TA_SECTION_CADASTRALE
-- I.2.1. La table TA_SECTION_CADASTRALE sert à acceuillir les informations provenant des données tarif de la RVLLP suivant le secteur et le local professionnel
CREATE TABLE G_DGFIP.TA_SECTION_CADASTRALE(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
    fid_code NUMBER(38,0),
    fid_section NUMBER(38,0),
    fid_prefixe NUMBER(38,0),
    fid_metadonnee NUMBER(38,0),
    fid_geom NUMBER(38,0)
    );

-- I.2.2 Création des commentaires des colonnes
COMMENT ON TABLE G_DGFIP.TA_SECTION_CADASTRALE IS 'Table regroupant les sections cadastrales.';
COMMENT ON COLUMN G_DGFIP.TA_SECTION_CADASTRALE.objectid IS 'Clé primaire de la table TA_SECTION_CADASTRALE.';
COMMENT ON COLUMN G_DGFIP.TA_SECTION_CADASTRALE.fid_code IS 'Clé étrangère vers la table TA_CODE pour connaitre le code insee de la section cadastrale.';
COMMENT ON COLUMN G_DGFIP.TA_SECTION_CADASTRALE.fid_section IS 'Clé étrangère vers la table TA_CODE pour connaitre la section de la section cadastrale.';
COMMENT ON COLUMN G_DGFIP.TA_SECTION_CADASTRALE.fid_prefixe IS 'Clé étrangère vers la table TA_CODE pour connaitre le prefixe de la section cadastrale.';
COMMENT ON COLUMN G_DGFIP.TA_SECTION_CADASTRALE.fid_metadonnee IS 'Clé étrangère vers la table TA_METADONNE pour connaitre la source et le millesime de la section cadastrale.';
COMMENT ON COLUMN G_DGFIP.TA_SECTION_CADASTRALE.fid_geom IS 'Clé étrangère vers la table TA_SECTION_CADASTRALE_GEOM pour connaitre la géométrie de la section cadastrale.';

-- I.2.3 Création de la clé primaire
ALTER TABLE G_DGFIP.TA_SECTION_CADASTRALE
ADD CONSTRAINT TA_SECTION_CADASTRALE_PK 
PRIMARY KEY("OBJECTID")
USING INDEX TABLESPACE "G_ADT_INDX";


-- I.2.4 Création des clés étrangères
-- I.2.4.1 vers la table G_GEO.TA_CODE
ALTER TABLE G_DGFIP.TA_SECTION_CADASTRALE
ADD CONSTRAINT "TA_SECTION_CADASTRALE_FID_CODE_FK" 
FOREIGN KEY ("FID_CODE")
REFERENCES G_GEO."TA_CODE"("OBJECTID");

-- I.2.4.2 vers la table G_GEO.TA_CODE
ALTER TABLE G_DGFIP.TA_SECTION_CADASTRALE
ADD CONSTRAINT "TA_SECTION_CADASTRALE_FID_SECTION_FK" 
FOREIGN KEY ("FID_SECTION")
REFERENCES G_GEO."TA_CODE"("OBJECTID");

-- I.2.4.3 vers la table G_GEO.TA_CODE
ALTER TABLE G_DGFIP.TA_SECTION_CADASTRALE
ADD CONSTRAINT "TA_SECTION_CADASTRALE_FID_PREFIXE_FK" 
FOREIGN KEY ("FID_PREFIXE")
REFERENCES G_GEO."TA_CODE"("OBJECTID");

-- I.2.4.4 vers la table G_GEO.TA_METADONNE
ALTER TABLE G_DGFIP.TA_SECTION_CADASTRALE
ADD CONSTRAINT "TA_SECTION_CADASTRALE_FID_METADONNE_FK" 
FOREIGN KEY ("FID_METADONNEE")
REFERENCES G_GEO."TA_METADONNEE"("OBJECTID");

-- I.2.4.5 vers la table G_GEO.TA_SECTION_CADASTRALE_GEOM
ALTER TABLE G_DGFIP.TA_SECTION_CADASTRALE
ADD CONSTRAINT "TA_SECTION_CADASTRALE_FID_GEOM_FK" 
FOREIGN KEY ("FID_GEOM")
REFERENCES G_GEO."TA_SECTION_CADASTRALE_GEOM"("OBJECTID");


-- I.2.5 Création des index sur les cléfs étrangères.
CREATE INDEX ta_section_cadastrale_fid_code_IDX ON G_DGFIP.TA_SECTION_CADASTRALE(fid_code)
TABLESPACE G_ADT_INDX;

CREATE INDEX ta_section_cadastrale_fid_section_IDX ON G_DGFIP.TA_SECTION_CADASTRALE(fid_nom)
TABLESPACE G_ADT_INDX;

CREATE INDEX ta_section_cadastrale_fid_prefixe_IDX ON G_DGFIP.TA_SECTION_CADASTRALE(fid_lib_type)
TABLESPACE G_ADT_INDX;

CREATE INDEX ta_section_cadastrale_fid_metadonnee_IDX ON G_DGFIP.TA_SECTION_CADASTRALE(fid_metadonnee)
TABLESPACE G_ADT_INDX;

CREATE INDEX ta_section_cadastrales_fid_geom_IDX ON G_DGFIP.TA_SECTION_CADASTRALE(fid_iris_geom)
TABLESPACE G_ADT_INDX;


-- II. FICHIER NOMENCLATURE_SECTION_CADASTRALE
-- Insertion de la nomenclature des sections cadastrales

-- II.1. Insertion de la source dans G_GEO.TA_SOURCE
MERGE INTO G_GEO.TA_SOURCE a
USING 
    (
        SELECT 'PCI' AS nom_source, 'Plan Cadastral Informatisé' AS description FROM DUAL
    ) b
ON (UPPER(a.nom_source) = UPPER(b.nom_source)
	AND UPPER(a.description) = UPPER(b.description))
WHEN NOT MATCHED THEN
INSERT (a.nom_source,a.description)
VALUES (b.nom_source,b.description)
;

-- II.2. Insertion de la provenance de la données dans G_GEO.TA_PROVENANCE
MERGE INTO G_GEO.TA_PROVENANCE a
USING
    (
        SELECT 'https://geoservices.ign.fr/documentation/diffusion/telechargement-donnees-libres.html#contoursiris' AS url, 'Donnée à télécharger en libre accès' AS methode_acquisition FROM DUAL
    ) b
ON (UPPER(a.url) = UPPER(b.url)
	AND UPPER(a.methode_acquisition) = UPPER(b.methode_acquisition))
WHEN NOT MATCHED THEN
INSERT (a.url,a.methode_acquisition)
VALUES(b.url,b.methode_acquisition)
;

-- II.3. Insertion des données dans G_GEO.TA_DATE_ACQUISITION
MERGE INTO G_GEO.TA_DATE_ACQUISITION a
USING
    (
        SELECT TO_DATE(SYSDATE,'dd/mm/yy') AS DATE_ACQUISITION, TO_DATE('01/01/17') AS MILLESIME, SYS_CONTEXT('USERENV', 'OS_USER') AS NOM_OBTENTEUR FROM DUAL
    ) b
ON (a.date_acquisition = b.date_acquisition
	AND a.millesime = b.millesime
	AND a.nom_obtenteur = b.nom_obtenteur)
WHEN NOT MATCHED THEN
INSERT (a.date_acquisition,a.millesime, a.nom_obtenteur)
VALUES (b.date_acquisition, b.millesime, b.nom_obtenteur)
;

-- II.4. Insertion des données dans G_GEO.TA_ORGANISME
MERGE INTO G_GEO.TA_ORGANISME a
USING
	(
		SELECT 'DGFIP' AS ACRONYME, 'Direction Générale des Finances Publiques' AS NOM_ORGANISME FROM DUAL
	) temp
ON (UPPER(a.acronyme) = UPPER(temp.acronyme)
	AND UPPER(a.nom_organisme) = UPPER(b.nom_organisme))
WHEN NOT MATCHED THEN
INSERT (a.acronyme,a.nom_organisme)
VALUES(temp.acronyme,temp.nom_organisme)
;

-- II.5. Insertion des données dans G_GEO.TA_METADONNEE
MERGE INTO G_GEO.TA_METADONNEE a
USING
    (
        SELECT 
            a.objectid AS FID_SOURCE,
            b.objectid AS FID_ACQUISITION,
            c.objectid AS FID_PROVENANCE
        FROM
            G_GEO.TA_SOURCE a,
            G_GEO.TA_DATE_ACQUISITION b,
            G_GEO.TA_PROVENANCE c
        WHERE
            a.nom_source = 'PCI'
        AND
            b.millesime IN ('01/01/2017')
        AND
            b.date_acquisition = TO_DATE(SYSDATE,'dd/mm/yy')
        AND
            b.nom_obtenteur = SYS_CONTEXT('USERENV', 'OS_USER')
        AND
            c.url = 'https://www.impots.gouv.fr/portail/revision-des-valeurs-locatives-des-locaux-professionnels'
    )temp
ON (a.fid_source = temp.fid_source
AND a.fid_acquisition = temp.fid_acquisition
AND a.fid_provenance = temp.fid_provenance)
WHEN NOT MATCHED THEN
INSERT (a.fid_source, a.fid_acquisition, a.fid_provenance)
VALUES (temp.fid_source, temp.fid_acquisition, temp.fid_provenance)
;

-- II.6. Insertion des données dans la table G_GEO.TA_METADONNEE_RELATION_ORGANISME
MERGE INTO G_GEO.TA_METADONNEE_RELATION_ORGANISME a
USING
    (
        SELECT
            a.objectid AS fid_metadonnee,
            e.objectid AS fid_organisme
        FROM
            G_GEO.TA_METADONNEE a
        INNER JOIN G_GEO.TA_SOURCE b ON b.objectid = a.fid_source
        INNER JOIN G_GEO.TA_DATE_ACQUISITION c ON a.fid_acquisition = c.objectid
        INNER JOIN G_GEO.TA_PROVENANCE d ON a.fid_provenance = d.objectid,
            G_GEO.TA_ORGANISME e
        WHERE
            b.nom_source = 'PCI'
		AND
		    c.millesime IN ('01/01/2017')
		AND
		    c.date_acquisition = TO_DATE(SYSDATE,'dd/mm/yy')
        AND
            d.url = 'https://www.impots.gouv.fr/portail/revision-des-valeurs-locatives-des-locaux-professionnels'
        AND
            e.nom_organisme = 'Direction Générale des Finances Publiques'
    )b
ON(a.fid_metadonnee = b.fid_metadonnee
	AND a.fid_organisme = b.fid_organisme)
WHEN NOT MATCHED THEN
INSERT(a.fid_metadonnee, a.fid_organisme)
VALUES(b.fid_metadonnee, b.fid_organisme)
;

-- II.7. Insertion de la nomenclature dans la table G_GEO.TA_LIBELLE_LONG
MERGE INTO G_GEO.TA_LIBELLE_LONG a
USING 
    (
    SELECT 'section' AS VALEUR FROM dual
    UNION
    SELECT 'prefixe' AS VALEUR FROM dual
    UNION
    SELECT 'code insee' AS VALEUR FROM dual
    ) b
  ON (UPPER(a.VALEUR) = UPPER(b.VALEUR))
  WHEN NOT MATCHED THEN
  INSERT (a.VALEUR)
  VALUES (b.VALEUR)
;

-- II.8. Insertion de la nomenclature dans la table G_GEO.TA_LIBELLE_COURT
MERGE INTO G_GEO.TA_LIBELLE_COURT a
USING 
    (
    SELECT 'pre' AS VALEUR FROM dual
    ) b
  ON (UPPER(a.VALEUR) = UPPER(b.VALEUR))
  WHEN NOT MATCHED THEN
  INSERT (a.VALEUR)
  VALUES (b.VALEUR)
;

-- II.9. Insertion des familles utilisée par les données cadastrale dans la table G_GEO.TA_FAMILLE.
MERGE INTO G_GEO.TA_FAMILLE a
USING 
    (
    SELECT 'identifiants de zone cadastrale' AS VALEUR FROM dual
    ) b
ON (UPPER(a.VALEUR) = UPPER(b.VALEUR))
WHEN NOT MATCHED THEN
INSERT (a.VALEUR)
VALUES (b.VALEUR);

-- II.10. Insertion des correspondances famille libelle dans G_GEO.TA_FAMILLE_LIBELLE;
MERGE INTO G_GEO.TA_FAMILLE_LIBELLE a
USING 
    (
    SELECT
        a.objectid AS fid_famille,
        b.objectid AS fid_libelle_long
    FROM
        G_GEO.TA_FAMILLE a,
        G_GEO.TA_LIBELLE_LONG b
    WHERE
        UPPER(a.VALEUR) = 'IDENTIFIANTS DE ZONE CADASTRALE' AND UPPER(b.VALEUR) = 'PREFIXE'
        OR UPPER(a.VALEUR) = 'IDENTIFIANTS DE ZONE CADASTRALE' AND UPPER(b.VALEUR) = 'SECTION'
        OR UPPER(a.VALEUR) = 'IDENTIFIANTS DE ZONE ADMINISTRATIVE' AND UPPER(b.VALEUR) = 'CODE_INSEE'
    ) b
ON (a.fid_famille = b.fid_famille
	AND a.fid_libelle_long = b.fid_libelle_long)
WHEN NOT MATCHED THEN
INSERT (a.fid_famille,a.fid_libelle_long)
VALUES (b.fid_famille,b.fid_libelle_long);

-- II.11. Insertion des fid_libelle_long dans la table G_GEO.TA_LIBELLE
MERGE INTO G_GEO.TA_LIBELLE a
USING
    (
    SELECT
        a.objectid AS fid_libelle_long
    FROM
        G_GEO.TA_LIBELLE_LONG a
    INNER JOIN
        G_GEO.TA_FAMILLE_LIBELLE b ON b.fid_libelle_long = a.objectid
    INNER JOIN
        G_GEO.TA_FAMILLE c ON c.objectid = b.fid_famille
    WHERE
        UPPER(c.VALEUR) = 'IDENTIFIANTS DE ZONE CADASTRALE'
    OR UPPER(c.VALEUR) = 'IDENTIFIANTS DE ZONE ADMINISTRATIVE'
    )b
ON(a.fid_libelle_long = b.fid_libelle_long)
WHEN NOT MATCHED THEN
INSERT (a.fid_libelle_long)
VALUES (b.fid_libelle_long);

-- II.12. Insertion des données dans la table G_GEO.TA_LIBELLE_CORRESPONDANCE
MERGE INTO G_GEO.TA_LIBELLE_CORRESPONDANCE a
USING 
    (
        SELECT
            a.objectid AS fid_libelle,
            b.objectid AS fid_libelle_court
        FROM
            G_GEO.TA_LIBELLE_COURT b,        
            G_GEO.TA_LIBELLE a
        INNER JOIN 
            G_GEO.TA_LIBELLE_LONG c ON c.objectid = a.fid_libelle_long
        INNER JOIN
            G_GEO.TA_FAMILLE_LIBELLE d ON d.fid_libelle_long = c.objectid
        INNER JOIN
            G_GEO.TA_FAMILLE e ON e.objectid = d.fid_famille
        WHERE
            UPPER(b.VALEUR) = 'PRE' AND UPPER(c.VALEUR) = 'PREFIXE'
        AND UPPER(e.VALEUR) = 'IDENTIFIANTS DE ZONE CADASTRALE' 
    )b
ON(a.fid_libelle = b.fid_libelle
	AND a.fid_libelle_court = b.fid_libelle_court)
WHEN NOT MATCHED THEN
INSERT(a.fid_libelle, a.fid_libelle_court)
VALUES(b.fid_libelle, b.fid_libelle_court);


-- III. FICHIER NORMALISATION_SECTION_CADASTRALE
-- Insertion de la normalisation des sections cadastrales

-- III.1. Insertion des codes SECTION dans G_GEO.TA_CODE
MERGE INTO G_GEO.TA_CODE a
USING 
    (
    SELECT
        DISTINCT(a.SECTION) AS valeur,
        b.objectid AS fid_libelle
    FROM 
        S_EDIGEO.SECTION_CADASTRALE a,
        G_GEO.TA_LIBELLE b
    INNER JOIN G_GEO.TA_LIBELLE_LONG c ON b.fid_libelle_long = c.objectid
    INNER JOIN G_GEO.TA_FAMILLE_LIBELLE d ON d.fid_libelle_long = c.objectid
    INNER JOIN G_GEO.TA_FAMILLE e ON e.objectid = d.fid_famille
    WHERE
        UPPER(c.valeur) = 'SECTION'
    AND UPPER(e.valeur) = 'IDENTIFIANTS DE ZONE CADASTRALE'
    ) b
ON (a.valeur = b.valeur
    AND a.fid_libelle = b.fid_libelle)
WHEN NOT MATCHED THEN
INSERT (a.valeur,a.fid_libelle)
VALUES (b.valeur,b.fid_libelle);


-- III.2. Insertion des codes PREFIXE dans G_GEO.TA_CODE
MERGE INTO G_GEO.TA_CODE a
USING 
    (
    SELECT
        DISTINCT(a.PRE) AS valeur,
        b.objectid AS fid_libelle
    FROM 
        S_EDIGEO.SECTION_CADASTRALE a,
        G_GEO.TA_LIBELLE b
    INNER JOIN G_GEO.TA_LIBELLE_LONG c ON b.fid_libelle_long = c.objectid
    INNER JOIN G_GEO.TA_FAMILLE_LIBELLE d ON d.fid_libelle_long = c.objectid
    INNER JOIN G_GEO.TA_FAMILLE e ON e.objectid = d.fid_famille
    WHERE
        UPPER(c.valeur) = 'PREFIXE'
    AND UPPER(e.valeur) = 'IDENTIFIANTS DE ZONE CADASTRALE'
    ) b
ON (a.valeur = b.valeur
    AND a.fid_libelle = b.fid_libelle)
WHEN NOT MATCHED THEN
INSERT (a.valeur,a.fid_libelle)
VALUES (b.valeur,b.fid_libelle);


-- III.3. Insertion des géométrie des SECTION CADASTRALE dans G_GEO.TA_SECTION_CADASTRALE_GEOM
INSERT INTO G_DGFIP.TA_SECTION_CADASTRALE_GEOM
SELECT
    geom
FROM
    S_EDIGEO.SECTION_CADASTRALE
-- Sous requete dans le WHERE pour n'insérer que les nouvelles géométrie pas encore présente dans la table
WHERE
    id_sec not IN
        (
        SELECT
            a.id_sec
        FROM
            S_EDIGEO.SECTION_CADASTRALE a,
            G_DGFIP.TA_SECTION_CADASTRALE_GEOM b
        WHERE
            ORA_HASH(TO_CHAR(SDO_UTIL.TO_WKTGEOMETRY(SDO_GEOM.SDO_CENTROID(a.geom)))) = ORA_HASH(TO_CHAR(SDO_UTIL.TO_WKTGEOMETRY(SDO_GEOM.SDO_CENTROID(b.geom))))
        )
;

-- III.4. Normalisation des sections cadastrale dans la table TA_SECTION_CADASTRALE.
MERGE INTO G_DGFIP.TA_SECTION_CADASTRALE a
USING 
    (
    SELECT
            b.objectid AS fid_code,
            g.objectid AS fid_section,
            l.objectid AS fid_prefixe,
            n.objectid AS fid_metadonnee,
            o.objectid AS fid_geom
        FROM
            S_EDIGEO.SECTION_CADASTRALE a
            -- selection du fid_code
            INNER JOIN G_GEO.TA_CODE b ON b.valeur = a.section
            INNER JOIN G_GEO.TA_LIBELLE c ON c.objectid = b.fid_libelle
            INNER JOIN G_GEO.TA_LIBELLE_LONG d ON d.objectid = c.fid_libelle_long
            INNER JOIN G_GEO.TA_FAMILLE_LIBELLE e ON e.fid_libelle_long = d.objectid
            INNER JOIN G_GEO.TA_FAMILLE f ON f.objectid = e.fid_famille
            -- selection du fid_section
            INNER JOIN G_GEO.TA_CODE g ON g.valeur = a.section
            INNER JOIN G_GEO.TA_LIBELLE h ON h.objectid = g.fid_libelle
            INNER JOIN G_GEO.TA_LIBELLE_LONG i ON i.objectid = h.fid_libelle_long
            INNER JOIN G_GEO.TA_FAMILLE_LIBELLE j ON j.fid_libelle_long = i.objectid
            INNER JOIN G_GEO.TA_FAMILLE k ON k.objectid = j.fid_famille,
            -- selection du fid_prefixe
            INNER JOIN G_GEO.TA_CODE l ON l.valeur = a.pre
            INNER JOIN G_GEO.TA_LIBELLE m ON m.objectid = l.fid_libelle
            INNER JOIN G_GEO.TA_LIBELLE_LONG n ON n.objectid = m.fid_libelle_long
            INNER JOIN G_GEO.TA_FAMILLE_LIBELLE o ON o.fid_libelle_long = n.objectid
            INNER JOIN G_GEO.TA_FAMILLE p ON p.objectid = o.fid_famille,
            -- selection des metadonnees
            G_GEO.TA_METADONNEE q,
            -- selection des géométrie
            S_EDIGEO.TA_SECTION_CADASTRALE r
        WHERE
        	-- fid_code pour les codes communes
            UPPER(d.valeur) = 'CODE INSEE'
        AND
            UPPER(f.valeur) = 'IDENTIFIANTS DE ZONE ADMINISTRATIVE'
        AND
        	-- fid_code pour les codes sections
            UPPER(i.valeur) = 'SECTION'
        AND
            UPPER(k.valeur) = 'IDENTIFIANTS DE ZONE CADASTRALE'
        AND
        	-- fid_code pour les codes sections
            UPPER(i.valeur) = 'PREFIXE'
        AND
            UPPER(k.valeur) = 'IDENTIFIANTS DE ZONE CADASTRALE'
        -- sous requete AND pour insérer le fid_métadonnee au millesime le plus récent pour la donnée considérée
        AND 
            r.objectid IN
                (
                SELECT
                    a.objectid AS id_mtd
                FROM
                    G_GEO.TA_METADONNEE a
                    INNER JOIN G_GEO.TA_SOURCE b ON a.fid_source = b.objectid
                    INNER JOIN G_GEO.TA_DATE_ACQUISITION c ON c.objectid = a.fid_acquisition
                WHERE
                    c.millesime IN(
                                SELECT
                                    MAX(b.millesime) as MILLESIME
                                FROM
                                    G_GEO.TA_METADONNEE a
                                INNER JOIN G_GEO.TA_DATE_ACQUISITION b ON a.fid_acquisition = b.objectid 
                                INNER JOIN G_GEO.TA_SOURCE c ON c.objectid = a.fid_source
                                WHERE c.nom_source = 'PCI'
                                )
                AND
                    b.nom_source = 'PCI'
                )
        -- sous requete AND pour insérer le fid_iris_geom de la bonne géométrie de l'IRIS.
        AND
            ORA_HASH(TO_CHAR(SDO_UTIL.TO_WKTGEOMETRY(SDO_GEOM.SDO_CENTROID(a.geom)))) = ORA_HASH(TO_CHAR(SDO_UTIL.TO_WKTGEOMETRY(SDO_GEOM.SDO_CENTROID(r.geom))))
    )b
ON (a.fid_code = b.fid_code
	AND a.fid_section = b.fid_section
	AND a.fid_prefixe = b.fid_prefixe
	AND a.fid_metadonnee = b.fid_metadonnee
	AND a.fid_iris_geom = b.fid_geom )
WHEN NOT MATCHED THEN
INSERT (a.fid_code,a.fid_section,a.fid_prefixe,a.fid_metadonnee,a.fid_geom)
VALUES (b.fid_code,b.fid_section,b.fid_prefixe,b.fid_metadonnee,b.fid_geom)
;

COMMIT;

-- IV. En cas d'exeption levée, faire un ROLLBACK
EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('une erreur est survenue, un rollback va être effectué: ' || SQLCODE || ' : '  || SQLERRM(SQLCODE));
    ROLLBACK POINT_SAUVERGARDE_1;
END;
/