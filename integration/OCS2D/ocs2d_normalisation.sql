-- NORMALISATION DES DONNEES OCS2D;

-- 1. Ajout de la colonne identity à la table ocs2d pour avoir des identifiant unique par polygone afin de permettre la normalisation des données.
-- 1.1 indiquer la sequence de la table ta_ocs2d
ALTER TABLE ocs2d_05_test
ADD IDENTITE INTEGER GENERATED BY DEFAULT AS IDENTITY
START WITH 1
INCREMENT BY 1
NOCACHE;
COMMIT;


-- 1.2 creadtion de objectid à partir de TA_OCS2D pour reprendre la suite de la numérotation.
MERGE INTO OCS2D_15 a
USING
    (
        WITH CTE AS
            (
            SELECT
                MAX(objectid) AS objectid_max
            FROM
                G_GEO.TA_LIBELLE 
            )
            SELECT
                a.OGR_FID AS OGR_FID,
                CTE.objectid_max + ROWNUM AS objectid
            FROM
                OCS2D_15 a,
                CTE cte
    )b
ON (a.ogr_fid = b.ogr_fid)
WHEN MATCHED THEN
UPDATE SET a.identite = b.objectid;



-- 2. Insertion des géométrie dans la table TA_OCS2D_GEOM
-- CREATION DE LA COLONNE HASH
ALTER TABLE OCS2D_15
ADD HASH NUMBER(38)

-- AJOUT DES DONNEES
UPDATE TABLE OCS2D_15
SET HASH = ORA_HASH(SDO_UTIL.TO_WKTGEOMETRY(a.ORA_GEOMETRY))

-- INSERTION DES VALEURS DANS TA_OCS2D_GEOM.
MERGE INTO TA_OCS2D_GEOM a
USING
	(
		SELECT
			ORA_HASH(SDO_UTIL.TO_WKTGEOMETRY(a.ORA_GEOMETRY)) AS HASH_OCS2D,
			a.ORA_GEOMETRY AS ORA_GEOMETRY
		FROM 
			OCS2D_15 a
	)b
ON (ORA_HASH(SDO_UTIL.TO_WKTGEOMETRY(a.GEOM)) = b.HASH_OCS2D)
WHEN NOT MATCHED THEN
INSERT (a.GEOM)
VALUES (b.ORA_GEOMETRY)

-- AUTRE
INSERT INTO ta_ocs2d_geom(geom)
SELECT 
    ora_geometry
FROM
    OCS2D_15 a
-- Selection des géométrie unique
WHERE
    identite not IN
        (SELECT id_b
            FROM
                (SELECT
                        a.identite AS id_a,
                        b.identite AS id_b
                    FROM
                        OCS2D_15 a,
                        OCS2D_15 b
                    WHERE
                        a.identite < b.identite
                    AND
                        SDO_RELATE(a.ora_geometry, b.ora_geometry,'mask=equal') = 'TRUE'))
-- Ajout des géométries qui ne sont pas déjà présentes dans la table
AND
    identite not IN
        (SELECT
            a.identite
        FROM
            OCS2D_15 a,
            ta_ocs2d_geom b
        WHERE
            SDO_RELATE(a.ora_geometry, b.geom,'mask=equal') = 'TRUE')
;

-- 3. Insertion des commentaires dans la table TA_OCS2D_COMMENTAIRE
MERGE INTO TA_OCS2D_COMMENTAIRE tc
USING
	(
		SELECT DISTINCT "comment05" AS commentaire
        FROM ocs2d_05_test
        WHERE "comment05" IS NOT NULL
	)temp
ON(temp.commentaire = tc.valeur)
WHEN NOT MATCHED THEN
INSERT (tc.valeur)
VALUES (temp.commentaire)
;


-- 4. Insertion des sources dans la table TA_OCS2D_SOURCE
MERGE INTO TA_OCS2D_SOURCE ts
USING
	(
		SELECT DISTINCT "source05" AS source
		FROM ocs2d_05_test
		WHERE "source05" IS NOT NULL
	)temp
ON(temp.source = ts.valeur)
WHEN NOT MATCHED THEN
INSERT (ts.valeur)
VALUES (temp.source)
;


-- 5. Insertion des sources dans la table TA_OCS2D_INDICE
MERGE INTO TA_OCS2D_INDICE ti
USING
	(
		SELECT DISTINCT "indice05" AS indice FROM ocs2d_05_test
	)temp
ON(temp.indice = ti.valeur)
WHEN NOT MATCHED THEN
INSERT (ti.valeur)
VALUES (temp.indice)
;


-- 6. Insertion des données dans la table TA_OCS2D
MERGE INTO TA_OCS2D tocs2d
USING(
	SELECT
		o.identite AS objectid,
		cs.fid_libelle_niv_3 AS fid_lib_cs,
		us.fid_libelle_niv_3 AS fid_lib_us,
		i.objectid AS fid_ocs2d_indice,
		s.objectid AS fid_ocs2d_source,
		m.objectid AS fid_metadonnee,
		g.objectid AS fid_geom
	FROM
		TA_OCS2D_GEOM g,
		TA_METADONNEE m,
		ocs2d_05_test o
	LEFT JOIN V_NOMENCLATURE_OCS2D_OCCUPATION cs ON cs."LIBELLE_COURT_NIV_3" = o."cs05"
	LEFT JOIN V_NOMENCLATURE_OCS2D_USAGE us ON us."LIBELLE_COURT_NIV_3" = o."us05"
	LEFT JOIN TA_OCS2D_INDICE i ON i.valeur = o."indice05"
	LEFT JOIN TA_OCS2D_SOURCE s ON s.valeur = o."source05"
	WHERE
	    m.objectid IN (
	    		SELECT
					m.objectid
				FROM
				    ta_metadonnee m
				INNER JOIN ta_source s ON m.fid_source = s.objectid
				INNER JOIN ta_date_acquisition a ON m.fid_acquisition = a.objectid
				INNER JOIN ta_provenance p ON m.fid_provenance = p.objectid
				INNER JOIN ta_organisme o ON m.fid_organisme = o.objectid
	            INNER JOIN ta_echelle e ON m.fid_echelle = e.objectid
				WHERE
				    s.nom_source = 'OCS2D'
				AND
				    a.millesime IN ('01/01/2005')
				AND
				    a.date_acquisition = '06/04/2020'
				AND
				    p.url = 'https://www.geo2france.fr'
				AND
				    o.acronyme = 'PPIGE'
				AND 
					e.echelle = '1/5000')
	        AND
	            SDO_RELATE(o.ora_geometry, g.geom,'mask=equal') = 'TRUE'
	)temp
ON(temp.objectid = tocs2d.objectid
AND temp.cs = tocs2d.cs
AND temp.us = tocs2d.us
AND temp.indice = tocs2d.indice
AND temp.source = tocs2d.source
AND temp.metadonnee = tocs2d.metadonnee
)
WHEN NOT MATCHED THEN
INSERT(tocs2d.objectid, tocs2d.fid_lib_cs, tocs2d.fid_lib_us, tocs2d.fid_ocs2d_indice, tocs2d.fid_ocs2d_source, tocs2d.fid_metadonnee,tocs2d.fid_geom)
VALUES(temp.objectid, temp.fid_lib_cs, temp.fid_lib_us, temp.fid_ocs2d_indice, temp.fid_ocs2d_source, temp.fid_metadonnee,temp.fid_geom)
;


-- 7. Insertion des données dans la table ta_commentaire
MERGE INTO TA_OCS2D_RELATION_COMMENTAIRE r
USING
	(
		SELECT 
			oc.identite AS identite,
			c.objectid AS valeur
		FROM
			ocs2d_05_test oc
		INNER JOIN ta_ocs2d_commentaire c ON OC."comment05" = c.valeur
	)temp
ON(r.fid_ocs2d = temp.identite
AND r.fid_ocs2d_commentaire = temp.valeur)
WHEN NOT MATCHED THEN
INSERT (r.fid_ocs2d,r.fid_ocs2d_commentaire)
VALUES (temp.identite,temp.valeur);